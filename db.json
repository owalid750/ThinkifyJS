{
    "questions": [
        {
            "id": 1,
            "question": "Explain the concept of closures in JavaScript.",
            "image": null,
            "answers": [
                "A closure is a global function with no scope.",
                "A closure is a function that remembers its outer variables even after the outer function has finished executing.",
                "A closure is a function that only runs once.",
                "A closure is a way to declare variables."
            ],
            "correct_answer": 1,
            "hint": "Think about functions within functions.",
            "explanation": "Closures allow inner functions to access the variables of outer functions even after the outer function has completed execution.",
            "difficulty": "Hard"
        },
        {
            "id": 2,
            "question": "What is the difference between '==' and '===' operators in JavaScript?",
            "image": null,
            "answers": [
                "'==' checks for value equality, while '===' checks for both value and type equality.",
                "'==' checks for both value and type equality, while '===' checks for value equality only.",
                "Both operators check for value and type equality.",
                "Both operators check for value equality only."
            ],
            "correct_answer": 0,
            "hint": "Consider type coercion.",
            "explanation": "'==' performs type coercion before comparing, while '===' does not perform type coercion and requires both value and type to be the same.",
            "difficulty": "Medium"
        },
        {
            "id": 3,
            "question": "What is hoisting in JavaScript?",
            "image": null,
            "answers": [
                "Hoisting is the process of moving function and variable declarations to the top of their scope before code execution.",
                "Hoisting is the process of optimizing code by the JavaScript engine.",
                "Hoisting is a method of variable declaration.",
                "Hoisting refers to the use of 'this' keyword in JavaScript."
            ],
            "correct_answer": 0,
            "hint": "Think about how JavaScript handles declarations.",
            "explanation": "In JavaScript, hoisting moves function and variable declarations to the top of their containing scope during the compile phase, allowing functions to be called and variables to be referenced before they are defined.",
            "difficulty": "Medium"
        },
        {
            "id": 4,
            "question": "What are the different data types in JavaScript?",
            "image": null,
            "answers": [
                "Number, String, Boolean, Object, Undefined, Symbol, BigInt",
                "Integer, Float, Character, String, Boolean, Object",
                "Number, String, Boolean, Array, Undefined, Null",
                "Number, String, Boolean, Object, Undefined, Null, Symbol, BigInt"
            ],
            "correct_answer": 3,
            "hint": "Consider both primitive and non-primitive types.",
            "explanation": "JavaScript has seven primitive data types: Number, String, Boolean, Undefined, Null, Symbol, and BigInt. Objects (including Arrays and Functions) are non-primitive data types.",
            "difficulty": "Easy"
        },
        {
            "id": 5,
            "question": "What is the purpose of the 'this' keyword in JavaScript?",
            "image": null,
            "answers": [
                "'this' refers to the global object in all cases.",
                "'this' refers to the object from which the function was called.",
                "'this' refers to the parent object of the current function.",
                "'this' refers to the DOM element that triggered the event."
            ],
            "correct_answer": 1,
            "hint": "Think about the context in which a function is called.",
            "explanation": "In JavaScript, 'this' refers to the object from which the function was called, which can vary depending on how the function is invoked.",
            "difficulty": "Medium"
        },
        {
            "id": 6,
            "question": "What is event delegation in JavaScript?",
            "image": null,
            "answers": [
                "A technique of adding event listeners to multiple elements individually.",
                "A technique of using a single event listener to manage all events of a particular type on multiple elements.",
                "A method to stop event propagation.",
                "A way to directly assign events to child elements."
            ],
            "correct_answer": 1,
            "hint": "Consider how events bubble up in the DOM.",
            "explanation": "Event delegation involves adding a single event listener to a parent element to manage events for all of its child elements, taking advantage of event bubbling in the DOM.",
            "difficulty": "Hard"
        },
        {
            "id": 7,
            "question": "What is the difference between 'null' and 'undefined' in JavaScript?",
            "image": null,
            "answers": [
                "'null' represents an uninitialized variable, while 'undefined' represents a variable that has been declared but not assigned a value.",
                "'null' represents a variable that has been declared but not assigned a value, while 'undefined' represents an uninitialized variable.",
                "Both 'null' and 'undefined' represent the absence of value, but 'null' is an object, and 'undefined' is a type.",
                "There is no difference; both are used interchangeably."
            ],
            "correct_answer": 2,
            "hint": "Consider the types of both values.",
            "explanation": "'undefined' means a variable has been declared but has not yet been assigned a value, while 'null' is an assignment value that represents no value or no object. 'null' is of type 'object', whereas 'undefined' is of type 'undefined'.",
            "difficulty": "Easy"
        },
        {
            "id": 8,
            "question": "What is a promise in JavaScript?",
            "image": null,
            "answers": [
                "A promise is a callback function.",
                "A promise is an object representing the eventual completion or failure of an asynchronous operation.",
                "A promise is a synchronous function that returns a value.",
                "A promise is a method to handle exceptions in JavaScript."
            ],
            "correct_answer": 1,
            "hint": "Think about asynchronous operations.",
            "explanation": "A promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value.",
            "difficulty": "Medium"
        },
        {
            "id": 9,
            "question": "What is the purpose of the 'async' and 'await' keywords in JavaScript?",
            "image": null,
            "answers": [
                "They are used to create synchronous functions.",
                "They are used to handle asynchronous operations more efficiently, making asynchronous code appear synchronous.",
                "They are used to declare variables.",
                "They are used to handle exceptions in asynchronous code."
            ],
            "correct_answer": 1,
            "hint": "Consider how asynchronous code can be made more readable.",
            "explanation": "The 'async' keyword is used to declare a function as asynchronous, allowing the use of 'await' inside it. The 'await' keyword pauses the execution of the function until the promise is resolved, making the code easier to read and maintain as it appears synchronous.",
            "difficulty": "Medium"
        },
        {
            "id": 10,
            "question": "What is the difference between 'let' and 'var' in JavaScript?",
            "image": null,
            "answers": [
                "'let' is function-scoped, while 'var' is block-scoped.",
                "'let' is block-scoped, while 'var' is function-scoped.",
                "Both 'let' and 'var' are block-scoped.",
                "Both 'let' and 'var' are function-scoped."
            ],
            "correct_answer": 1,
            "hint": "Consider how scope is defined in functions and blocks.",
            "explanation": "'let' declares variables that are block-scoped, meaning they are only accessible within the block they are defined. 'var' declares variables that are function-scoped, making them accessible throughout the function.",
            "difficulty": "Medium"
        },
        {
            "id": 11,
            "question": "What is the purpose of the 'bind' method in JavaScript?",
            "image": null,
            "answers": [
                "To create a new function with a specified 'this' value and initial arguments.",
                "To immediately invoke a function with a specified 'this' value.",
                "To permanently change the 'this' value within a function.",
                "To bind two functions together."
            ],
            "correct_answer": 0,
            "hint": "Think about how to set the 'this' context for future function calls.",
            "explanation": "The 'bind' method creates a new function that, when called, has its 'this' keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
            "difficulty": "Hard"
        },
        {
            "id": 12,
            "question": "What are arrow functions, and how do they differ from regular functions?",
            "image": null,
            "answers": [
                "Arrow functions are a shorthand syntax for writing functions and do not have their own 'this' context.",
                "Arrow functions are a longer syntax for writing functions and have their own 'this' context.",
                "Arrow functions are used exclusively for asynchronous operations.",
                "Arrow functions are a shorthand syntax for writing functions and have their own 'this' context."
            ],
            "correct_answer": 0,
            "hint": "Consider the 'this' binding behavior in arrow functions.",
            "explanation": "Arrow functions provide a concise syntax for writing functions and do not have their own 'this' context; instead, they inherit 'this' from the enclosing lexical context.",
            "difficulty": "Medium"
        },
        {
            "id": 13,
            "question": "What is the event loop in JavaScript?",
            "image": null,
            "answers": [
                "A loop that iterates over all events in a JavaScript application.",
                "A concurrency model that handles asynchronous operations by placing them in a queue and executing them sequentially.",
                "A function that loops through event listeners.",
                "A method to create loops in event-driven programming."
            ],
            "correct_answer": 1,
            "hint": "Think about how JavaScript manages asynchronous operations.",
            "explanation": "The event loop is a concurrency model in JavaScript that handles asynchronous operations by placing them in a queue and executing them sequentially, ensuring non-blocking behavior.",
            "difficulty": "Hard"
        },
        {
            "id": 14,
            "question": "What is the purpose of the 'prototype' property in JavaScript?",
            "image": null,
            "answers": [
                "To define properties and methods that are shared among all instances of a constructor function.",
                "To create private variables within a function.",
                "To inherit properties from another object.",
                "To define static methods for a function."
            ],
            "correct_answer": 0,
            "hint": "Consider how objects inherit methods in JavaScript.",
            "explanation": "The 'prototype' property allows you to add properties and methods to a constructor function, which are then shared among all instances created by that constructor, enabling efficient inheritance.",
            "difficulty": "Medium"
        },
        {
            "id": 15,
            "question": "What is the difference between synchronous and asynchronous code in JavaScript?",
            "image": null,
            "answers": [
                "Synchronous code is executed all at once, while asynchronous code is executed line by line.",
                "Synchronous code is executed sequentially, blocking further execution until the current operation completes, while asynchronous code allows other operations to continue before the current one completes.",
                "Synchronous code runs in the background, while asynchronous code runs in the foreground.",
                "There is no difference between synchronous and asynchronous code in JavaScript."
            ],
            "correct_answer": 1,
            "hint": "Consider how JavaScript handles blocking and non-blocking operations.",
            "explanation": "Synchronous code is executed sequentially, blocking further execution until the current operation completes. Asynchronous code allows other operations to continue before the current one completes, enabling non-blocking behavior.",
            "difficulty": "Medium"
        },
        {
            "id": 16,
            "question": "What is a 'callback' function in JavaScript?",
            "image": null,
            "answers": [
                "A function that is called immediately after it is defined.",
                "A function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
                "A function that calls itself recursively.",
                "A function that is executed after a specified time interval."
            ],
            "correct_answer": 1,
            "hint": "Think about functions that are passed as arguments.",
            "explanation": "A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
            "difficulty": "Easy"
        },
        {
            "id": 17,
            "question": "What is the purpose of the 'async' and 'await' keywords in JavaScript?",
            "image": null,
            "answers": [
                "They are used to create synchronous functions.",
                "They are used to handle asynchronous operations more efficiently, making asynchronous code appear synchronous.",
                "They are used to declare variables.",
                "They are used to handle exceptions in asynchronous code."
            ],
            "correct_answer": 1,
            "hint": "Consider how asynchronous code can be made more readable.",
            "explanation": "The 'async' and 'await' keywords are used to handle asynchronous operations more efficiently, allowing asynchronous code to be written in a way that appears synchronous, improving readability and maintainability.",
            "difficulty": "Medium"
        },
        {
            "id": 18,
            "question": "What is the 'DOM' in JavaScript?",
            "image": null,
            "answers": [
                "A programming interface for web documents that represents the page so that programs can change the document structure, style, and content.",
                "A database management system used in JavaScript.",
                "A debugging tool for JavaScript code.",
                "A server-side framework for building web applications."
            ],
            "correct_answer": 0,
            "hint": "Consider how JavaScript interacts with HTML and CSS.",
            "explanation": "The Document Object Model (DOM) is a programming interface for web documents. It represents the page, allowing JavaScript to manipulate the structure, style, and content dynamically.",
            "difficulty": "Easy"
        },
        {
            "id": 19,
            "question": "What is the purpose of the 'bind' method in JavaScript?",
            "image": null,
            "answers": [
                "To create a new function with a specified 'this' value and initial arguments.",
                "To immediately invoke a function with a specified 'this' value.",
                "To permanently change the 'this' value within a function.",
                "To bind two functions together."
            ],
            "correct_answer": 0,
            "hint": "Think about how to set the 'this' context for future function calls.",
            "explanation": "The 'bind' method creates a new function that, when called, has its 'this' keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
            "difficulty": "Hard"
        },
        {
            "id": 20,
            "question": "What is the difference between 'let' and 'var' in JavaScript?",
            "image": null,
            "answers": [
                "'let' is function-scoped, while 'var' is block-scoped.",
                "'let' is block-scoped, while 'var' is function-scoped.",
                "Both 'let' and 'var' are block-scoped.",
                "Both 'let' and 'var' are function-scoped."
            ],
            "correct_answer": 1,
            "hint": "Consider how scope is defined in functions and blocks.",
            "explanation": "'let' declares variables that are block-scoped, meaning they are only accessible within the block they are defined. 'var' declares variables that are function-scoped, making them accessible throughout the function.",
            "difficulty": "Medium"
        },
        {
            "id": 21,
            "question": "What is the event loop in JavaScript?",
            "image": null,
            "answers": [
                "A loop that iterates over all events in a JavaScript application.",
                "A concurrency model that handles asynchronous operations by placing them in a queue and executing them sequentially.",
                "A function that loops through event listeners.",
                "A method to create loops in event-driven programming."
            ],
            "correct_answer": 1,
            "hint": "Think about how JavaScript manages asynchronous operations.",
            "explanation": "The event loop is a concurrency model in JavaScript that handles asynchronous operations by placing them in a queue and executing them sequentially, ensuring non-blocking behavior.",
            "difficulty": "Hard"
        },
        {
            "id": 22,
            "question": "What is the purpose of the 'prototype' property in JavaScript?",
            "image": null,
            "answers": [
                "To define properties and methods that are shared among all instances of a constructor function.",
                "To create private variables within a function.",
                "To inherit properties from another object.",
                "To define static methods for a function."
            ],
            "correct_answer": 0,
            "hint": "Consider how objects inherit methods in JavaScript.",
            "explanation": "The 'prototype' property allows you to add properties and methods to a constructor function, which are then shared among all instances created by that constructor, enabling efficient inheritance.",
            "difficulty": "Medium"
        },
        {
            "id": 23,
            "question": "What is the difference between synchronous and asynchronous code in JavaScript?",
            "image": null,
            "answers": [
                "Synchronous code is executed all at once, while asynchronous code is executed line by line.",
                "Synchronous code is executed sequentially, blocking further execution until the current operation completes, while asynchronous code allows other operations to continue before the current one completes.",
                "Synchronous code runs in the background, while asynchronous code runs in the foreground.",
                "There is no difference between synchronous and asynchronous code in JavaScript."
            ],
            "correct_answer": 1,
            "hint": "Consider how JavaScript handles blocking and non-blocking operations.",
            "explanation": "Synchronous code is executed sequentially, blocking further execution until the current operation completes. Asynchronous code allows other operations to continue before the current one completes, enabling non-blocking behavior.",
            "difficulty": "Medium"
        },
        {
            "id": 24,
            "question": "What is a 'callback' function in JavaScript?",
            "image": null,
            "answers": [
                "A function that is called immediately after it is defined.",
                "A function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
                "A function that calls itself recursively.",
                "A function that is executed after a specified time interval."
            ],
            "correct_answer": 1,
            "hint": "Think about functions that are passed as arguments.",
            "explanation": "A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
            "difficulty": "Easy"
        },
        {
            "id": 25,
            "question": "What is the 'DOM' in JavaScript?",
            "image": null,
            "answers": [
                "A programming interface for web documents that represents the page so that programs can change the document structure, style, and content.",
                "A database management system used in JavaScript.",
                "A debugging tool for JavaScript code.",
                "A server-side framework for building web applications."
            ],
            "correct_answer": 0,
            "hint": "Consider how JavaScript interacts with HTML and CSS.",
            "explanation": "The Document Object Model (DOM) is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content.",
            "difficulty": "Easy"
        },
        {
            "id": 26,
            "question": "What is the purpose of the 'use strict' directive in JavaScript?",
            "image": null,
            "answers": [
                "To enable strict mode, which catches common coding errors and prevents the use of unsafe features.",
                "To disable all browser-specific features.",
                "To enable debugging mode in JavaScript.",
                "To enforce the use of semicolons at the end of statements."
            ],
            "correct_answer": 0,
            "hint": "Think about how to enforce stricter parsing and error handling in your code.",
            "explanation": "The 'use strict' directive enables strict mode in JavaScript, which catches common coding errors and prevents the use of unsafe features, leading to more secure and optimized code.",
            "difficulty": "Medium"
        },
        {
            "id": 27,
            "question": "What is the difference between 'null' and 'undefined' in JavaScript?",
            "image": null,
            "answers": [
                "'null' represents an uninitialized variable, while 'undefined' represents a variable that has been declared but not assigned a value.",
                "'null' represents a variable that has been declared but not assigned a value, while 'undefined' represents an uninitialized variable.",
                "Both 'null' and 'undefined' represent the absence of value, but 'null' is an object, and 'undefined' is a type.",
                "There is no difference; both are used interchangeably."
            ],
            "correct_answer": 2,
            "hint": "Consider the types of both values.",
            "explanation": "'undefined' means a variable has been declared but has not yet been assigned a value, while 'null' is an assignment value that represents no value or no object. 'null' is of type 'object', whereas 'undefined' is of type 'undefined'.",
            "difficulty": "Easy"
        },
        {
            "id": 28,
            "question": "What is the purpose of the 'bind' method in JavaScript?",
            "image": null,
            "answers": [
                "To create a new function with a specified 'this' value and initial arguments.",
                "To immediately invoke a function with a specified 'this' value.",
                "To permanently change the 'this' value within a function.",
                "To bind two functions together."
            ],
            "correct_answer": 0,
            "hint": "Think about how to set the 'this' context for future function calls.",
            "explanation": "The 'bind' method creates a new function that, when called, has its 'this' keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
            "difficulty": "Hard"
        },
        {
            "id": 29,
            "question": "What is the difference between 'let' and 'var' in JavaScript?",
            "image": null,
            "answers": [
                "'let' is function-scoped, while 'var' is block-scoped.",
                "'let' is block-scoped, while 'var' is function-scoped.",
                "Both 'let' and 'var' are block-scoped.",
                "Both 'let' and 'var' are function-scoped."
            ],
            "correct_answer": 1,
            "hint": "Consider how scope is defined in functions and blocks.",
            "explanation": "'let' declares variables that are block-scoped, meaning they are only accessible within the block they are defined. 'var' declares variables that are function-scoped, making them accessible throughout the function.",
            "difficulty": "Medium"
        },
        {
            "id": 30,
            "question": "What is the event loop in JavaScript?",
            "image": null,
            "answers": [
                "A loop that iterates over all events in a JavaScript application.",
                "A concurrency model that handles asynchronous operations by placing them in a queue and executing them sequentially.",
                "A function that loops through event listeners.",
                "A method to create loops in event-driven programming."
            ],
            "correct_answer": 1,
            "hint": "Think about how JavaScript manages asynchronous operations.",
            "explanation": "The event loop is a concurrency model in JavaScript that handles asynchronous operations by placing them in a queue and executing them sequentially, ensuring non-blocking behavior.",
            "difficulty": "Hard"
        },
        {
            "id": 31,
            "question": "What is the purpose of the 'prototype' property in JavaScript?",
            "image": null,
            "answers": [
                "To define properties and methods that are shared among all instances of a constructor function.",
                "To create private variables within a function.",
                "To inherit properties from another object.",
                "To define static methods for a function."
            ],
            "correct_answer": 0,
            "hint": "Consider how objects inherit methods in JavaScript.",
            "explanation": "The 'prototype' property allows you to add properties and methods to a constructor function, which are then shared among all instances created by that constructor, enabling efficient inheritance.",
            "difficulty": "Medium"
        },
        {
            "id": 32,
            "question": "What is the difference between synchronous and asynchronous code in JavaScript?",
            "image": null,
            "answers": [
                "Synchronous code is executed all at once, while asynchronous code is executed line by line.",
                "Synchronous code is executed sequentially, blocking further execution until the current operation completes, while asynchronous code allows other operations to continue before the current one completes.",
                "Synchronous code runs in the background, while asynchronous code runs in the foreground.",
                "There is no difference between synchronous and asynchronous code in JavaScript."
            ],
            "correct_answer": 1,
            "hint": "Consider how JavaScript handles blocking and non-blocking operations.",
            "explanation": "Synchronous code is executed sequentially, blocking further execution until the current operation completes. Asynchronous code allows other operations to continue before the current one completes, enabling non-blocking behavior.",
            "difficulty": "Medium"
        },
        {
            "id": 33,
            "question": "What is a 'callback' function in JavaScript?",
            "image": null,
            "answers": [
                "A function that is called immediately after it is defined.",
                "A function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
                "A function that calls itself recursively.",
                "A function that is executed after a specified time interval."
            ],
            "correct_answer": 1,
            "hint": "Think about functions that are passed as arguments.",
            "explanation": "A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
            "difficulty": "Easy"
        },
        {
            "id": 34,
            "question": "What is the 'DOM' in JavaScript?",
            "image": null,
            "answers": [
                "A programming interface for web documents that represents the page so that programs can change the document structure, style, and content.",
                "A database management system used in JavaScript.",
                "A debugging tool for JavaScript code.",
                "A server-side framework for building web applications."
            ],
            "correct_answer": 0,
            "hint": "Consider how JavaScript interacts with HTML and CSS.",
            "explanation": "The Document Object Model (DOM) is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content.",
            "difficulty": "Easy"
        },
        {
            "id": 35,
            "question": "What is the purpose of the 'use strict' directive in JavaScript?",
            "image": null,
            "answers": [
                "To enable strict mode, which catches common coding errors and prevents the use of unsafe features.",
                "To disable all browser-specific features.",
                "To enable debugging mode in JavaScript.",
                "To enforce the use of semicolons at the end of statements."
            ],
            "correct_answer": 0,
            "hint": "Think about how to enforce stricter parsing and error handling in your code.",
            "explanation": "The 'use strict' directive enables strict mode in JavaScript, which catches common coding errors and prevents the use of unsafe features, leading to more secure and optimized code.",
            "difficulty": "Medium"
        }
    ]
}